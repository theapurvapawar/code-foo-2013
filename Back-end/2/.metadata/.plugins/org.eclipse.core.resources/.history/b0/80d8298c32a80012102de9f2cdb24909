package SortIncludes;

import java.util.ArrayList;

public class QuickSortScore {

	
	  private int[] numbers;
	  private int number;
	  private ArrayList<player> privatePlayerArrayList = new ArrayList<player>();

	  public void sort(ArrayList<player> playerList) {
	    // Check for empty or null array
	    if (playerList==null || playerList.size()==0){
	      return;
	    }
	    this.privatePlayerArrayList = playerList;
	    number = playerList.size();
	    quicksort(0, number - 1);
	  }

	  private void quicksort(int low, int high) {
	    int i = low, j = high;
	    // Get the pivot element from the middle of the list
	    player pivot = privatePlayerArrayList.get(low + (high-low)/2);

	    // Divide into two lists
	    while (i <= j) {
	      // If the current value from the left list is smaller then the pivot
	      // element then get the next element from the left list
	      while (privatePlayerArrayList.get(i).score < pivot.score) {
	        i++;
	      }
	      // If the current value from the right list is larger then the pivot
	      // element then get the next element from the right list
	      while (privatePlayerArrayList.get(j).score > pivot.score) {
	        j--;
	      }

	      // If we have found a values in the left list which is larger then
	      // the pivot element and if we have found a value in the right list
	      // which is smaller then the pivot element then we exchange the
	      // values.
	      // As we are done we can increase i and j
	      if (i <= j) {
	        exchange(i, j);
	        i++;
	        j--;
	      }
	    }
	    // Recursion
	    if (low < j)
	      quicksort(low, j);
	    if (i < high)
	      quicksort(i, high);
	  }

	  private void exchange(int i, int j) {
		player temp = privatePlayerArrayList.get(i);
	    privatePlayerArrayList.add(i, privatePlayerArrayList.get(j));
	    privatePlayerArrayList.add(j, temp);
	  }
	  
	  public static void main(String[] args) {
	 
	  
	int[] values = {1,4,2,6,8,9,3};	  
		  
	  quickSort algo = new quickSort();
	  
	  algo.sort(values);
	  
	  System.out.println(values[1]);
	  
	  
	  }
  }
	
